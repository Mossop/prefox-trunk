# HG changeset patch
# User Dave Townsend <dtownsend@oxymoronical.com>
# Date 1273018314 25200

[palm] Support special keys

diff --git a/widget/src/webos/nsAppShell.cpp b/widget/src/webos/nsAppShell.cpp
--- a/widget/src/webos/nsAppShell.cpp
+++ b/widget/src/webos/nsAppShell.cpp
@@ -75,7 +75,6 @@ nsAppShell::nsAppShell() :
 #ifdef USE_GL
     SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
 #endif
-    SDL_EnableUNICODE(1);
     PDL_BannerMessagesEnable(PDL_TRUE);
     PDL_ScreenTimeoutEnable(PDL_TRUE);
 
diff --git a/widget/src/webos/nsWindow.cpp b/widget/src/webos/nsWindow.cpp
--- a/widget/src/webos/nsWindow.cpp
+++ b/widget/src/webos/nsWindow.cpp
@@ -69,6 +69,9 @@ PRBool gInited = PR_FALSE;
 
 NS_IMPL_ISUPPORTS_INHERITED0(nsWindow, nsBaseWidget)
 
+static PRUint8 gMeta = 0;
+static PRUint8 gShift = 0;
+
 PRUint32 gLastInputEventTime = 0;
 
 // All the toplevel windows that have been created; these are in
@@ -642,164 +645,206 @@ nsWindow::OnSDLEvent(SDL_Event *sdlevt) 
 }
 
 void
-nsWindow::InitKeyEvent(nsKeyEvent& event, SDL_keysym &keysym)
+nsWindow::DispatchKeyEvent(PRUint32 msg, SDL_keysym &keysym)
 {
-    event.isShift = keysym.mod & (KMOD_LSHIFT | KMOD_RSHIFT);
-    event.isControl = keysym.mod & (KMOD_LCTRL | KMOD_RCTRL);
-    event.isAlt = keysym.mod & (KMOD_LALT | KMOD_RALT);
-    event.isMeta = keysym.mod & (KMOD_LMETA | KMOD_RMETA);
+    nsKeyEvent event(PR_TRUE, msg, this);
+
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Got key %d (meta is %d)", event.charCode, gMeta));
+    if (gMeta) {
+        switch (keysym.sym) {
+        case SDLK_BACKSPACE:
+            event.keyCode = NS_VK_BACK;
+            gMeta = 0;
+            gShift = 0;
+            break;
+        case SDLK_RETURN:
+            event.keyCode = NS_VK_RETURN;
+            gMeta = 0;
+            gShift = 0;
+            break;
+        case SDLK_SPACE:
+            event.charCode = ' ';
+            break;
+        case SDLK_COMMA:
+            event.charCode = '_';
+            break;
+        case SDLK_PERIOD:
+            event.charCode = '.';
+            break;
+        case SDLK_AT:
+            event.charCode = '0';
+            break;
+        case SDLK_a:
+            event.charCode = '&';
+            break;
+        case SDLK_b:
+            event.charCode = '#';
+            break;
+        case SDLK_c:
+            event.charCode = '8';
+            break;
+        case SDLK_d:
+            event.charCode = '4';
+            break;
+        case SDLK_e:
+            event.charCode = '1';
+            break;
+        case SDLK_f:
+            event.charCode = '5';
+            break;
+        case SDLK_g:
+            event.charCode = '6';
+            break;
+        case SDLK_h:
+            event.charCode = '$';
+            break;
+        case SDLK_i:
+            event.charCode = '%';
+            break;
+        case SDLK_j:
+            event.charCode = '!';
+            break;
+        case SDLK_k:
+            event.charCode = ':';
+            break;
+        case SDLK_l:
+            event.charCode = '\'';
+            break;
+        case SDLK_m:
+            event.charCode = ';';
+            break;
+        case SDLK_n:
+            event.charCode = '?';
+            break;
+        case SDLK_o:
+            event.charCode = '"';
+            break;
+        case SDLK_p:
+            event.charCode = '=';
+            break;
+        case SDLK_q:
+            event.charCode = '/';
+            break;
+        case SDLK_r:
+            event.charCode = '2';
+            break;
+        case SDLK_s:
+            event.charCode = '-';
+            break;
+        case SDLK_t:
+            event.charCode = '3';
+            break;
+        case SDLK_u:
+            event.charCode = ')';
+            break;
+        case SDLK_v:
+            event.charCode = '9';
+            break;
+        case SDLK_w:
+            event.charCode = '+';
+           break;
+        case SDLK_x:
+            event.charCode = '7';
+            break;
+        case SDLK_y:
+            event.charCode = '(';
+            break;
+        case SDLK_z:
+            event.charCode = '*';
+            break;
+        default:
+            PR_LOG(gWindowLog, PR_LOG_ERROR, ("Unknown key code %d", keysym.sym));
+            return;
+        }
+    }
+    else {
+        switch (keysym.sym) {
+        case SDLK_BACKSPACE:
+            event.keyCode = NS_VK_BACK;
+            gMeta = 0;
+            gShift = 0;
+            break;
+        case SDLK_RETURN:
+            event.keyCode = NS_VK_RETURN;
+            gMeta = 0;
+            gShift = 0;
+            break;
+        case SDLK_SPACE:
+            event.charCode = ' ';
+            break;
+        case SDLK_COMMA:
+            event.charCode = ',';
+            break;
+        case SDLK_PERIOD:
+            event.charCode = '.';
+            break;
+        case SDLK_AT:
+            event.charCode = '@';
+            break;
+        case SDLK_a:
+        case SDLK_b:
+        case SDLK_c:
+        case SDLK_d:
+        case SDLK_e:
+        case SDLK_f:
+        case SDLK_g:
+        case SDLK_h:
+        case SDLK_i:
+        case SDLK_j:
+        case SDLK_k:
+        case SDLK_l:
+        case SDLK_m:
+        case SDLK_n:
+        case SDLK_o:
+        case SDLK_p:
+        case SDLK_q:
+        case SDLK_r:
+        case SDLK_s:
+        case SDLK_t:
+        case SDLK_u:
+        case SDLK_v:
+        case SDLK_w:
+        case SDLK_x:
+        case SDLK_y:
+        case SDLK_z:
+            event.charCode = keysym.sym;
+            if (gShift) {
+                event.charCode -= 32;
+            }
+            break;
+        default:
+            PR_LOG(gWindowLog, PR_LOG_ERROR, ("Unknown key code %d", keysym.sym));
+            return;
+        }
+    }
+
+    event.isShift = PR_FALSE;
+    event.isControl = PR_FALSE;
+    event.isAlt = PR_FALSE;
+    event.isMeta = PR_FALSE;
     event.time = PR_Now() / 1000;
 
-    switch (keysym.sym) {
-    case PDLK_GESTURE_BACK:
-    case PDLK_GESTURE_FORWARD:
-        break;
-    case SDLK_BACKSPACE:
-        event.keyCode = NS_VK_BACK;
-        break;
-    case SDLK_TAB:
-        event.keyCode = NS_VK_TAB;
-        break;
-    case SDLK_CLEAR:
-        break;
-    case SDLK_RETURN:
-        event.keyCode = NS_VK_RETURN;
-        break;
-    case SDLK_PAUSE:
-        break;
-    case SDLK_SPACE:
-        event.keyCode = NS_VK_SPACE;
-        break;
-    case SDLK_EXCLAIM:
-        break;
-    case SDLK_QUOTEDBL:
-        break;
-    case SDLK_HASH:
-        break;
-    case SDLK_DOLLAR:
-        break;
-    case SDLK_AMPERSAND:
-        break;
-    case SDLK_QUOTE:
-        event.keyCode = NS_VK_QUOTE;
-        break;
-    case SDLK_LEFTPAREN:
-        event.keyCode = NS_VK_OPEN_BRACKET;
-        break;
-    case SDLK_RIGHTPAREN:
-        event.keyCode = NS_VK_CLOSE_BRACKET;
-        break;
-    case SDLK_ASTERISK:
-        event.keyCode = NS_VK_MULTIPLY;
-        break;
-    case SDLK_PLUS:
-        event.keyCode = NS_VK_ADD;
-        break;
-    case SDLK_COMMA:
-        event.keyCode = NS_VK_COMMA;
-        break;
-    case SDLK_MINUS:
-        event.keyCode = NS_VK_SUBTRACT;
-        break;
-    case SDLK_PERIOD:
-        event.keyCode = NS_VK_PERIOD;
-        break;
-    case SDLK_SLASH:
-        event.keyCode = NS_VK_SLASH;
-        break;
-    case SDLK_0:
-    case SDLK_1:
-    case SDLK_2:
-    case SDLK_3:
-    case SDLK_4:
-    case SDLK_5:
-    case SDLK_6:
-    case SDLK_7:
-    case SDLK_8:
-    case SDLK_9:
-        event.keyCode = keysym.sym - SDLK_0 + NS_VK_0;
-        break;
-    case SDLK_COLON:
-        break;
-    case SDLK_SEMICOLON:
-        event.keyCode = NS_VK_SEMICOLON;
-        break;
-    case SDLK_LESS:
-        break;
-    case SDLK_EQUALS:
-        event.keyCode = NS_VK_EQUALS;
-        break;
-    case SDLK_GREATER:
-        break;
-    case SDLK_QUESTION:
-        break;
-    case SDLK_AT:
-        break;
-    case SDLK_LEFTBRACKET:
-        break;
-    case SDLK_BACKSLASH:
-        event.keyCode = NS_VK_BACK_SLASH;
-        break;
-    case SDLK_RIGHTBRACKET:
-        break;
-    case SDLK_CARET:
-        break;
-    case SDLK_UNDERSCORE:
-        break;
-    case SDLK_BACKQUOTE:
-        break;
-    case SDLK_a:
-    case SDLK_b:
-    case SDLK_c:
-    case SDLK_d:
-    case SDLK_e:
-    case SDLK_f:
-    case SDLK_g:
-    case SDLK_h:
-    case SDLK_i:
-    case SDLK_j:
-    case SDLK_k:
-    case SDLK_l:
-    case SDLK_m:
-    case SDLK_n:
-    case SDLK_o:
-    case SDLK_p:
-    case SDLK_q:
-    case SDLK_r:
-    case SDLK_s:
-    case SDLK_t:
-    case SDLK_u:
-    case SDLK_v:
-    case SDLK_w:
-    case SDLK_x:
-    case SDLK_y:
-    case SDLK_z:
-        event.keyCode = keysym.sym - SDLK_a + NS_VK_A;
-        break;
-    case SDLK_DELETE:
-        break;
-    case SDLK_KP0:
-    case SDLK_KP1:
-    case SDLK_KP2:
-    case SDLK_KP3:
-    case SDLK_KP4:
-    case SDLK_KP5:
-    case SDLK_KP6:
-    case SDLK_KP7:
-    case SDLK_KP8:
-    case SDLK_KP9:
-        break;
-    default:
-        PR_LOG(gWindowLog, PR_LOG_ERROR, ("Unknown key code %d", keysym.sym));
-        break;
-    }
-
-    event.charCode = keysym.unicode;
+    DispatchEvent(&event);
 }
 
 void
 nsWindow::OnKeyEvent(SDL_KeyboardEvent &keyevt)
 {
+    switch (keyevt.keysym.sym) {
+    case SDLK_RALT:
+        if (keyevt.type != SDL_KEYDOWN)
+            return;
+        gShift = 0;
+        gMeta = (gMeta + 1) % 3;
+        return;
+    case SDLK_LSHIFT:
+        if (keyevt.type != SDL_KEYDOWN)
+            return;
+        gMeta = 0;
+        gShift = (gShift + 1) % 3;
+        return;
+    }
+
     PRUint32 msg;
     switch (keyevt.type) {
     case SDL_KEYDOWN:
@@ -813,19 +858,18 @@ nsWindow::OnKeyEvent(SDL_KeyboardEvent &
         return;
     }
 
-    nsKeyEvent event(PR_TRUE, msg, this);
-    InitKeyEvent(event, keyevt.keysym);
-    if (event.charCode)
-        event.keyCode = 0;
-    DispatchEvent(&event);
+    DispatchKeyEvent(msg, keyevt.keysym);
 
     if (msg == NS_KEY_DOWN) {
-        nsKeyEvent pressEvent(PR_TRUE, NS_KEY_PRESS, this);
-        InitKeyEvent(pressEvent, keyevt.keysym);
-        PR_LOG(gWindowLog, PR_LOG_DEBUG,
-               ("Window 0x%08x Dispatching key event with keyCode %d charCode %d shift %d alt %d sym/ctrl %d",
-                (void*)this, event.keyCode, event.charCode, event.isShift, event.isAlt, event.isControl));
-        DispatchEvent(&pressEvent);
+        DispatchKeyEvent(NS_KEY_PRESS, keyevt.keysym);
+    }
+    else {
+        if (gMeta == 1) {
+            gMeta = 0;
+        }
+        if (gShift == 1) {
+            gShift = 0;
+        }
     }
 }
 
@@ -858,6 +902,9 @@ nsWindow::OnMouseEvent(SDL_Event *sdlevt
     case SDL_MOUSEMOTION:
         msg = NS_MOUSE_MOVE;
         break;
+    default:
+        PR_LOG(gWindowLog, PR_LOG_ERROR, ("Unknown mouse event %d", sdlevt->type));
+        return;
     }
 
     nsMouseEvent event(PR_TRUE,
diff --git a/widget/src/webos/nsWindow.h b/widget/src/webos/nsWindow.h
--- a/widget/src/webos/nsWindow.h
+++ b/widget/src/webos/nsWindow.h
@@ -162,7 +162,7 @@ protected:
     nsWindow* mParent;
 
     void OnMouseEvent(SDL_Event *sdlevt, nsIntPoint pt);
-    void InitKeyEvent(nsKeyEvent& event, SDL_keysym &keysym);
+    void DispatchKeyEvent(PRUint32 msg, SDL_keysym &keysym);
     void OnKeyEvent(SDL_KeyboardEvent &keyevt);
     void OnSizeChanged(const gfxIntSize& aSize);
 
