# HG changeset patch
# User Dave Townsend <dtownsend@oxymoronical.com>
# Date 1271291424 25200
# Node ID 128cf2588baaaa616c52aac565054db9640466ec
# Parent  ba3f2002dbf22292644b328dba05b8e802016e6a
[palm] Switch to PR logging throughout

diff --git a/gfx/thebes/public/gfxWebOSPlatform.h b/gfx/thebes/public/gfxWebOSPlatform.h
--- a/gfx/thebes/public/gfxWebOSPlatform.h
+++ b/gfx/thebes/public/gfxWebOSPlatform.h
@@ -88,6 +88,7 @@ public:
     FT_Library GetFTLibrary();
 
 protected:
+    void Shutdown();
     void AppendFacesFromFontFile(const char *aFileName);
 
     typedef nsDataHashtable<nsStringHashKey, nsRefPtr<FontFamily> > FontTable;
diff --git a/gfx/thebes/src/gfxWebOSPlatform.cpp b/gfx/thebes/src/gfxWebOSPlatform.cpp
--- a/gfx/thebes/src/gfxWebOSPlatform.cpp
+++ b/gfx/thebes/src/gfxWebOSPlatform.cpp
@@ -58,10 +58,20 @@
 #include FT_FREETYPE_H
 #include "gfxFT2Fonts.h"
 
+PRLogModuleInfo* gGFXWebOSPlatformLog = nsnull;
+
 static FT_Library gPlatformFTLibrary = NULL;
 
 gfxWebOSPlatform::gfxWebOSPlatform()
 {
+#if defined(PR_LOGGING)
+    if (!gGFXWebOSPlatformLog) {
+        gGFXWebOSPlatformLog = PR_NewLogModule("gfxWebOSPlatform");
+    }
+#endif
+
+    PR_LOG(gGFXWebOSPlatformLog, PR_LOG_DEBUG, ("Init"));
+
     FT_Init_FreeType(&gPlatformFTLibrary);
 
     mFonts.Init(200);
@@ -74,12 +84,22 @@ gfxWebOSPlatform::gfxWebOSPlatform()
 
 gfxWebOSPlatform::~gfxWebOSPlatform()
 {
+    PR_LOG(gGFXWebOSPlatformLog, PR_LOG_DEBUG, ("Destroy"));
+
     cairo_debug_reset_static_data();
 
-    //FT_Done_FreeType(gPlatformFTLibrary);
+    FT_Done_FreeType(gPlatformFTLibrary);
     gPlatformFTLibrary = NULL;
 }
 
+void
+gfxWebOSPlatform::Shutdown()
+{
+    PR_LOG(gGFXWebOSPlatformLog, PR_LOG_DEBUG, ("Shutdown"));
+
+    gfxPlatform::Shutdown();
+}
+
 already_AddRefed<gfxASurface>
 gfxWebOSPlatform::CreateOffscreenSurface(const gfxIntSize& size,
                                       gfxASurface::gfxImageFormat imageFormat)
diff --git a/widget/src/webos/nsAppShell.cpp b/widget/src/webos/nsAppShell.cpp
--- a/widget/src/webos/nsAppShell.cpp
+++ b/widget/src/webos/nsAppShell.cpp
@@ -39,7 +39,7 @@
 #include "nsAppShell.h"
 #include "nsWindow.h"
 #include "nsThreadUtils.h"
-
+#include "prlog.h"
 #include "prenv.h"
 
 #include <pthread.h>
@@ -48,27 +48,31 @@
 
 using namespace mozilla;
 
-#define EVLOG(args...) printf(args); printf("\n")
+PRLogModuleInfo* gAppShellLog = nsnull;
 
 nsAppShell *nsAppShell::gAppShell = nsnull;
 
 nsAppShell::nsAppShell()
 {
+#if defined(PR_LOGGING)
+    if (!gAppShellLog) {
+        gAppShellLog = PR_NewLogModule("nsAppShell");
+    }
+#endif
+
     gAppShell = this;
 }
 
 nsAppShell::~nsAppShell()
 {
+    PR_LOG(gAppShellLog, PR_LOG_DEBUG, ("Destroy"));
     gAppShell = nsnull;
 }
 
 nsresult
 nsAppShell::Init()
 {
-#ifdef PR_LOGGING
-    if (!gWidgetLog)
-        gWidgetLog = PR_NewLogModule("Widget");
-#endif
+    PR_LOG(gAppShellLog, PR_LOG_DEBUG, ("Init"));
 
     return nsBaseAppShell::Init();
 }
@@ -81,6 +85,8 @@ nsAppShell::ScheduleNativeEventCallback(
 void
 nsAppShell::ScheduleRedraw()
 {
+    PR_LOG(gAppShellLog, PR_LOG_DEBUG, ("ScheduleRedraw"));
+
     SDL_Event sdlevt;
     sdlevt.type = SDL_USEREVENT;
     sdlevt.user.code = WEBOS_EVENT_REDRAW;
@@ -90,29 +96,36 @@ nsAppShell::ScheduleRedraw()
 PRBool
 nsAppShell::ProcessNextNativeEvent(PRBool mayWait)
 {
+    PR_LOG(gAppShellLog, PR_LOG_DEBUG, ("ProcessNextNativeEvent(%d)", mayWait));
+
     SDL_Event event;
     int count = SDL_PollEvent(&event);
 
+    PR_LOG(gAppShellLog, PR_LOG_DEBUG, ("Got %d events", count));
+
     if (count == 0)
         return PR_FALSE;
 
+    PR_LOG(gAppShellLog, PR_LOG_DEBUG, ("Got event type %d", event.type));
+
     if (event.type == SDL_USEREVENT && event.user.code == WEBOS_EVENT_REDRAW)
     {
         // Coalesce any redraw events in the queue
         SDL_Event pendingEvent;
         while (true)
         {
+            PR_LOG(gAppShellLog, PR_LOG_DEBUG, ("Peeping at the next event"));
             count = SDL_PeepEvents(&pendingEvent, 1, SDL_PEEKEVENT, SDL_EVENTMASK (SDL_USEREVENT));
+            PR_LOG(gAppShellLog, PR_LOG_DEBUG, ("Got %d events", count));
             if (count <= 0)
                 break;
             if (pendingEvent.user.code != WEBOS_EVENT_REDRAW)
                 break;
+            PR_LOG(gAppShellLog, PR_LOG_DEBUG, ("Coalescing the next event"));
             SDL_PollEvent(&event);
         }
     }
 
-    EVLOG("Got event %d", event.type);
-
     nsWindow::OnGlobalSDLEvent(&event);
 
     return PR_TRUE;
diff --git a/widget/src/webos/nsScreenManager.cpp b/widget/src/webos/nsScreenManager.cpp
--- a/widget/src/webos/nsScreenManager.cpp
+++ b/widget/src/webos/nsScreenManager.cpp
@@ -39,9 +39,12 @@
 
 #include "nsScreenManager.h"
 #include "nsWindow.h"
+#include "prlog.h"
 
 #include "SDL/SDL.h"
 
+PRLogModuleInfo* gScreenManagerLog = nsnull;
+
 static gfxIntSize gScreenBounds;
 
 NS_IMPL_ISUPPORTS1(nsWebOSScreen, nsIScreen)
@@ -97,18 +100,32 @@ NS_IMPL_ISUPPORTS1(nsScreenManager, nsIS
 
 nsScreenManager::nsScreenManager()
 {
+#if defined(PR_LOGGING)
+    if (!gScreenManagerLog) {
+        gScreenManagerLog = PR_NewLogModule("nsScreenManager");
+    }
+#endif
+
+    PR_LOG(gScreenManagerLog, PR_LOG_DEBUG, ("Init"));
     mOneScreen = new nsWebOSScreen(nsnull);
 }
 
 nsScreenManager::~nsScreenManager()
 {
+    PR_LOG(gScreenManagerLog, PR_LOG_DEBUG, ("Destroy"));
 }
 
 gfxIntSize
 nsScreenManager::GetBounds()
 {
+#if defined(PR_LOGGING)
+    if (!gScreenManagerLog) {
+        gScreenManagerLog = PR_NewLogModule("nsScreenManager");
+    }
+#endif
+
     if (SDL_WasInit(SDL_INIT_VIDEO) == 0) {
-        printf("SDL Init\n");
+        PR_LOG(gScreenManagerLog, PR_LOG_DEBUG, ("SDL Init"));
         SDL_Init(SDL_INIT_VIDEO | SDL_INIT_NOPARACHUTE);
         SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
         SDL_SetVideoMode(0, 0, 0, SDL_OPENGL);
@@ -117,6 +134,8 @@ nsScreenManager::GetBounds()
         const SDL_VideoInfo *info = SDL_GetVideoInfo();
         gScreenBounds.width = info->current_w;
         gScreenBounds.height = info->current_h;
+
+        PR_LOG(gScreenManagerLog, PR_LOG_DEBUG, ("Screen size is %dx%d", info->current_w, info->current_h));
     }
 
     return gScreenBounds;
diff --git a/widget/src/webos/nsWindow.cpp b/widget/src/webos/nsWindow.cpp
--- a/widget/src/webos/nsWindow.cpp
+++ b/widget/src/webos/nsWindow.cpp
@@ -39,6 +39,7 @@
 #include "nsWindow.h"
 #include "nsScreenManager.h"
 #include "nsAppShell.h"
+#include "prlog.h"
 
 #include "nsIDeviceContext.h"
 #include "nsIRenderingContext.h"
@@ -57,14 +58,14 @@
 #include <GLES2/gl2.h>
 #include <GLES2/gl2ext.h>
 
-#define ALOG(args...) printf(args); printf("\n")
-
 #ifndef GL_BGRA_EXT
 #define GL_BGRA_EXT 0x80E1
 #endif
 
 using namespace mozilla;
 
+PRLogModuleInfo* gWindowLog = nsnull;
+
 NS_IMPL_ISUPPORTS_INHERITED0(nsWindow, nsBaseWidget)
 
 PRUint32 gLastInputEventTime = 0;
@@ -87,11 +88,12 @@ nsWindow::LogWindow(nsWindow *win, int i
 {
     char spaces[] = "                    ";
     spaces[indent < 20 ? indent : 20] = 0;
-    ALOG("%s [% 2d] 0x%08x [parent 0x%08x] [% 3d,% 3d % 3dx% 3d] vis %d type %d",
-         spaces, index, (intptr_t)win, (intptr_t)win->mParent,
-         win->mBounds.x, win->mBounds.y,
-         win->mBounds.width, win->mBounds.height,
-         win->mIsVisible, win->mWindowType);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG,
+           ("%s [% 2d] 0x%08x [parent 0x%08x] [% 3d,% 3d % 3dx% 3d] vis %d type %d",
+            spaces, index, (void*)win, (void*)win->mParent,
+            win->mBounds.x, win->mBounds.y,
+            win->mBounds.width, win->mBounds.height,
+            win->mIsVisible, win->mWindowType));
 }
 
 void
@@ -103,10 +105,12 @@ nsWindow::DumpWindows()
 void
 nsWindow::DumpWindows(const nsTArray<nsWindow*>& wins, int indent)
 {
-    for (int i = 0; i < wins.Length(); ++i) {
-        nsWindow *w = wins[i];
-        LogWindow(w, i, indent);
-        DumpWindows(w->mChildren, indent+1);
+    if (PR_LOG_TEST(gWindowLog, PR_LOG_DEBUG)) {
+        for (int i = 0; i < wins.Length(); ++i) {
+            nsWindow *w = wins[i];
+            LogWindow(w, i, indent);
+            DumpWindows(w->mChildren, indent+1);
+        }
     }
 }
 
@@ -114,16 +118,18 @@ nsWindow::nsWindow()
 {
 #ifdef PR_LOGGING
     if (!gWindowLog)
-        gWindowLog = PR_NewLogModule("Window");
+        gWindowLog = PR_NewLogModule("nsWindow");
 #endif
 
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x initialized", (void*)this));
+
     mIsVisible = PR_FALSE;
     mParent = nsnull;
 }
 
 nsWindow::~nsWindow()
 {
-    ALOG("nsWindow %p destructor", (void*)this);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x destroyed", (void*)this));
 }
 
 PRBool
@@ -144,12 +150,17 @@ nsWindow::Create(nsIWidget *aParent,
                  nsIToolkit *aToolkit,
                  nsWidgetInitData *aInitData)
 {
-    ALOG("nsWindow[%p]::Create %p [%d %d %d %d]", (void*)this, (void*)aParent, aRect.x, aRect.y, aRect.width, aRect.height);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG,
+           ("Window 0x%08x Create [parent 0x%08x] [% 3d,% 3d % 3dx% 3d]",
+            (void*)this, (void*)aParent, aRect.x, aRect.y,
+            aRect.width, aRect.height));
     nsWindow *parent = (nsWindow*) aParent;
 
     if (aNativeParent) {
         if (parent) {
-            ALOG("Ignoring native parent on Android window [%p], since parent was specified (%p %p)", (void*)this, (void*)aNativeParent, (void*)aParent);
+            PR_LOG(gWindowLog, PR_LOG_WARNING,
+                   ("Ignoring native parent since gecko parent was specified (0x%08x 0x%08x)",
+                    (void*)aNativeParent, (void*)aParent));
         } else {
             parent = (nsWindow*) aNativeParent;
         }
@@ -187,9 +198,12 @@ nsWindow::Create(nsIWidget *aParent,
 NS_IMETHODIMP
 nsWindow::Destroy(void)
 {
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x Destroy", (void*)this));
+
     for (PRUint32 i = 0; i < mChildren.Length(); ++i) {
         // why do we still have children?
-        ALOG("### Warning: Destroying window %p and reparenting child %p to null!", (void*)this, (void*)mChildren[i]);
+        PR_LOG(gWindowLog, PR_LOG_WARNING,
+               ("Reparenting child 0x%08x to null!", (void*)mChildren[i]));
         mChildren[i]->SetParent(nsnull);
     }
 
@@ -205,6 +219,8 @@ nsWindow::Destroy(void)
 NS_IMETHODIMP
 nsWindow::ConfigureChildren(const nsTArray<nsIWidget::Configuration>& config)
 {
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x ConfigureChildren()", (void*)this));
+
     for (PRUint32 i = 0; i < config.Length(); ++i) {
         nsWindow *childWin = (nsWindow*) config[i].mChild;
         childWin->Resize(config[i].mBounds.x,
@@ -223,6 +239,9 @@ nsWindow::SetParent(nsIWidget *aNewParen
     if ((nsIWidget*)mParent == aNewParent)
         return NS_OK;
 
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x SetParent(0x%08x)",
+                                      (void*)this, (void*)aNewParent));
+
     // If we had a parent before, remove ourselves from its list of
     // children.  If we didn't have a parent, then remove ourselves
     // from the list of toplevel windows if we're about to get a
@@ -252,10 +271,11 @@ nsWindow::GetParent()
 NS_IMETHODIMP
 nsWindow::Show(PRBool aState)
 {
-    ALOG("nsWindow[%p]::Show %d", (void*)this, aState);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, 
+           ("Window 0x%08x Show(%d)", (void*)this, aState));
 
     if (mWindowType == eWindowType_invisible) {
-        ALOG("trying to show invisible window! ignoring..");
+        PR_LOG(gWindowLog, PR_LOG_WARNING, ("Trying to show invisible window! ignoring..."));
         return NS_ERROR_FAILURE;
     }
 
@@ -286,9 +306,7 @@ nsWindow::Show(PRBool aState)
         }
     }
 
-#ifdef ANDROID_DEBUG_WIDGET
     DumpWindows();
-#endif
 
     return NS_OK;
 }
@@ -296,7 +314,7 @@ nsWindow::Show(PRBool aState)
 NS_IMETHODIMP
 nsWindow::SetModal(PRBool aState)
 {
-    ALOG("nsWindow[%p]::SetModal %d ignored", (void*)this, aState);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x SetModal(%d) ignored", (void*)this, aState));
 
     return NS_OK;
 }
@@ -313,7 +331,8 @@ nsWindow::ConstrainPosition(PRBool aAllo
                             PRInt32 *aX,
                             PRInt32 *aY)
 {
-    ALOG("nsWindow[%p]::ConstrainPosition %d [%d %d]", (void*)this, aAllowSlop, *aX, *aY);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x ConstrainPosition %d [% 3d,% 3d]",
+           (void*)this, aAllowSlop, *aX, *aY));
 
     // constrain toplevel windows; children we don't care about
     if (IsTopLevel()) {
@@ -357,12 +376,14 @@ nsWindow::Resize(PRInt32 aX,
                  PRInt32 aHeight,
                  PRBool aRepaint)
 {
-    ALOG("nsWindow[%p]::Resize [%d %d %d %d] (repaint %d)", (void*)this, aX, aY, aWidth, aHeight, aRepaint);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG,
+           ("Window 0x%08x Resize [% 3d,% 3d % 3dx% 3d] (repaint %d)",
+            (void*)this, aX, aY, aWidth, aHeight, aRepaint));
 
     PRBool needSizeDispatch = aWidth != mBounds.width || aHeight != mBounds.height;
 
     if (IsTopLevel()) {
-        ALOG("... ignoring Resize sizes on toplevel window");
+        PR_LOG(gWindowLog, PR_LOG_DEBUG, ("... ignoring Resize sizes on toplevel window"));
         gfxIntSize bounds = nsScreenManager::GetBounds();
         aX = 0;
         aY = 0;
@@ -389,7 +410,7 @@ nsWindow::Resize(PRInt32 aX,
 NS_IMETHODIMP
 nsWindow::SetZIndex(PRInt32 aZIndex)
 {
-    ALOG("nsWindow[%p]::SetZIndex %d ignored", (void*)this, aZIndex);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x SetZIndex(%d) ignored", (void*)this, aZIndex));
 
     return NS_OK;
 }
@@ -411,7 +432,7 @@ nsWindow::SetSizeMode(PRInt32 aMode)
 NS_IMETHODIMP
 nsWindow::Enable(PRBool aState)
 {
-    ALOG("nsWindow[%p]::Enable %d ignored", (void*)this, aState);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x Enable(%d) ignored", (void*)this, aState));
     return NS_OK;
 }
 
@@ -426,6 +447,7 @@ NS_IMETHODIMP
 nsWindow::Invalidate(const nsIntRect &aRect,
                      PRBool aIsSynchronous)
 {
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x Invalidate", (void*)this));
     nsAppShell::ScheduleRedraw();
     return NS_OK;
 }
@@ -441,7 +463,7 @@ nsWindow::Scroll(const nsIntPoint&,
                  const nsTArray<nsIntRect>&,
                  const nsTArray<nsIWidget::Configuration>&)
 {
-    ALOG("nsWindow[%p]::Scroll ignored!", (void*)this);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x Scroll ignored", (void*)this));
 }
 
 nsWindow*
@@ -455,15 +477,19 @@ nsWindow::FindTopLevel()
         toplevel = toplevel->mParent;
     }
 
-    ALOG("nsWindow::FindTopLevel(): couldn't find a toplevel or dialog window in this [%p] widget's hierarchy!", (void*)this);
+    PR_LOG(gWindowLog, PR_LOG_WARNING,
+           ("Window 0x%08x FindTopLevel could not find a toplevel window", (void*)this));
     return this;
 }
 
 NS_IMETHODIMP
 nsWindow::SetFocus(PRBool aRaise)
 {
-    if (!aRaise)
-        ALOG("nsWindow::SetFocus: can't set focus without raising, ignoring aRaise = false!");
+    if (!aRaise) {
+        PR_LOG(gWindowLog, PR_LOG_WARNING,
+               ("Window 0x%08x SetFocus, can't set focus without raising, ignoring aRaise = false!",
+                (void*)this));
+    }
 
     gFocusedWindow = this;
     FindTopLevel()->BringToFront();
@@ -482,7 +508,7 @@ nsWindow::BringToFront()
         return;
     }
 
-    ALOG("nsWindow[%p]::BringToFront", (void*)this);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x BringToFront", (void*)this));
 
     nsWindow *oldTop = nsnull;
     if (gTopLevelWindows.Length())
@@ -759,7 +785,7 @@ nsWindow::InitKeyEvent(nsKeyEvent& event
     case SDLK_KP9:
         break;
     default:
-        ALOG("Unknown key code!");
+        PR_LOG(gWindowLog, PR_LOG_ERROR, ("Unknown key code %d", keysym.sym));
         break;
     }
 
@@ -778,7 +804,7 @@ nsWindow::OnKeyEvent(SDL_KeyboardEvent &
         msg = NS_KEY_UP;
         break;
     default:
-        ALOG("Unknown key action event!");
+        PR_LOG(gWindowLog, PR_LOG_ERROR, ("Unknown key action event %d", keyevt.type));
         return;
     }
 
@@ -791,9 +817,9 @@ nsWindow::OnKeyEvent(SDL_KeyboardEvent &
     if (msg == NS_KEY_DOWN) {
         nsKeyEvent pressEvent(PR_TRUE, NS_KEY_PRESS, this);
         InitKeyEvent(pressEvent, keyevt.keysym);
-#ifdef ANDROID_DEBUG_WIDGET
-        ALOG("Dispatching key event with keyCode %d charCode %d shift %d alt %d sym/ctrl %d metamask %d", event.keyCode, event.charCode, event.isShift, event.isAlt, event.isControl, ae->MetaState());
-#endif
+        PR_LOG(gWindowLog, PR_LOG_DEBUG,
+               ("Window 0x%08x Dispatching key event with keyCode %d charCode %d shift %d alt %d sym/ctrl %d",
+                (void*)this, event.keyCode, event.charCode, event.isShift, event.isAlt, event.isControl));
         DispatchEvent(&pressEvent);
     }
 }
@@ -805,12 +831,14 @@ nsWindow::OnMouseEvent(SDL_Event *sdlevt
     pt.x -= offset.x;
     pt.y -= offset.y;
 
-    ALOG("Mouse event dispatched to %p at %d %d", (void*)this, pt.x, pt.y);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, 
+           ("Window 0x%08x Mouse event dispatched to % 3d,% 3d", (void*)this, pt.x, pt.y));
 
     if (pt.x < 0 || pt.x >= mBounds.width ||
         pt.y < 0 || pt.y >= mBounds.height)
     {
-        ALOG("Motion event dispatched to %p but final coordinates %d %d aren't within bounds", (void*)this, pt.x, pt.y);
+        PR_LOG(gWindowLog, PR_LOG_WARNING, 
+               ("Event is out of bounds % 3dx% 3d", (void*)this, mBounds.width, mBounds.height));
         return;
     }
 
@@ -844,11 +872,13 @@ nsWindow::OnMouseEvent(SDL_Event *sdlevt
     DispatchEvent(&event);
 }
 
-PRBool
+void
 nsWindow::DrawTo(gfxASurface *targetSurface)
 {
-    if (!mIsVisible)
-        return PR_FALSE;
+    if (!mIsVisible) {
+        PR_LOG(gWindowLog, PR_LOG_WARNING, ("Window 0x%08x is invisible", (void*)this));
+        return;
+    }
 
     nsRefPtr<gfxContext> ctx = new gfxContext(targetSurface);
 
@@ -876,14 +906,12 @@ nsWindow::DrawTo(gfxASurface *targetSurf
     for (PRUint32 i = 0; i < mChildren.Length(); ++i) {
         targetSurface->SetDeviceOffset(offset + gfxPoint(mChildren[i]->mBounds.x,
                                                          mChildren[i]->mBounds.y));
-        if (!mChildren[i]->DrawTo(targetSurface)) {
-            ALOG("nsWindow[%p]::DrawTo child %d[%p] returned FALSE!", (void*) this, i, (void*)mChildren[i]);
-        }
+        mChildren[i]->DrawTo(targetSurface);
     }
 
     targetSurface->SetDeviceOffset(offset);
 
-    return PR_TRUE;
+    return;
 }
 
 void
@@ -892,31 +920,33 @@ nsWindow::Redraw()
     static bool firstDraw = true;
 
     if (!IsTopLevel()) {
-        ALOG("##### redraw for window %p, which is not a toplevel window -- sending to toplevel!", (void*) this);
+        FindTopLevel()->Redraw();
+        return;
+    }
+
+    if (!mIsVisible) {
+        PR_LOG(gWindowLog, PR_LOG_WARNING,
+               ("Window 0x%08x Redraw for an invisible window, ignoring", (void*)this));
         DumpWindows();
         return;
     }
 
-    if (!mIsVisible) {
-        ALOG("##### redraw for window %p, which is not visible -- ignoring!", (void*) this);
-        DumpWindows();
-        return;
-    }
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Window 0x%08x Redraw", (void*)this));
 
     nsRefPtr<gfxImageSurface> targetSurface;
 
     targetSurface =
         new gfxImageSurface(gfxIntSize(mBounds.width, mBounds.height), gfxASurface::ImageFormatARGB32);
 
-    if (!DrawTo(targetSurface)) {
-        return;
-    }
+    DrawTo(targetSurface);
+
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Drawing to surface complete"));
 
     static bool hasBGRA = false;
 
     if (firstDraw) {
         const char *ext = (const char *) glGetString(GL_EXTENSIONS);
-        ALOG("GL extensions: %s", ext);
+        PR_LOG(gWindowLog, PR_LOG_DEBUG, ("GL extensions: %s", ext));
         if (strstr(ext, "GL_EXT_bgra") ||
             strstr(ext, "GL_IMG_texture_format_BGRA8888") ||
             strstr(ext, "GL_EXT_texture_format_BGRA8888"))
@@ -925,6 +955,8 @@ nsWindow::Redraw()
         firstDraw = false;
     }
 
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Compiling shaders"));
+
     static GLuint textureId = GLuint(-1);
     static GLuint programId = GLuint(-1);
     static GLint positionLoc, texCoordLoc, textureLoc;
@@ -976,7 +1008,7 @@ nsWindow::Redraw()
         glCompileShader(vsh);
         glGetShaderiv(vsh, GL_COMPILE_STATUS, &status);
         if (!status) {
-            ALOG("Failed to compile vertex shader");
+            PR_LOG(gWindowLog, PR_LOG_ERROR, ("Failed to compile vertex shader"));
             return;
         }
 
@@ -985,7 +1017,7 @@ nsWindow::Redraw()
         glCompileShader(fsh);
         glGetShaderiv(fsh, GL_COMPILE_STATUS, &status);
         if (!status) {
-            ALOG("Failed to compile fragment shader");
+            PR_LOG(gWindowLog, PR_LOG_ERROR, ("Failed to compile fragment shader"));
             return;
         }
 
@@ -996,7 +1028,7 @@ nsWindow::Redraw()
         glLinkProgram(programId);
         glGetProgramiv(programId, GL_LINK_STATUS, &status);
         if (!status) {
-            ALOG("Failed to link program");
+            PR_LOG(gWindowLog, PR_LOG_ERROR, ("Failed to link program"));
             return;
         }
 
@@ -1005,6 +1037,10 @@ nsWindow::Redraw()
         textureLoc = glGetUniformLocation(programId, "sTexture");
     }
 
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Compilation complete"));
+
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Painting textures"));
+
     int texDimWidth = targetSurface->Width();
     int texDimHeight = targetSurface->Height();
 
@@ -1052,9 +1088,13 @@ nsWindow::Redraw()
 
     int err = glGetError();
     if (err)
-        ALOG("GL error: %d", err);
+        PR_LOG(gWindowLog, PR_LOG_ERROR, ("GL error: %d", err));
+
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Displaying buffer"));
 
     SDL_GL_SwapBuffers();
+
+    PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Draw complete"));
 }
 
 void
@@ -1063,7 +1103,8 @@ nsWindow::OnSizeChanged(const gfxIntSize
     int w = aSize.width;
     int h = aSize.height;
 
-    ALOG("nsWindow: %p OnSizeChanged [%d %d]", (void*)this, w, h);
+    PR_LOG(gWindowLog, PR_LOG_DEBUG,
+           ("Window 0x%08x OnSizeChanged [% 3dx% 3d]", (void*)this, w, h));
 
     nsSizeEvent event(PR_TRUE, NS_SIZE, this);
     InitEvent(event);
diff --git a/widget/src/webos/nsWindow.h b/widget/src/webos/nsWindow.h
--- a/widget/src/webos/nsWindow.h
+++ b/widget/src/webos/nsWindow.h
@@ -152,7 +152,7 @@ public:
 protected:
     void BringToFront();
     nsWindow *FindTopLevel();
-    PRBool DrawTo(gfxASurface *targetSurface);
+    void DrawTo(gfxASurface *targetSurface);
     PRBool IsTopLevel();
     nsresult GetCurrentOffset(PRUint32 &aOffset, PRUint32 &aLength);
     nsresult DeleteRange(int aOffset, int aLen);
