# HG changeset patch
# User Dave Townsend <dtownsend@oxymoronical.com>
# Date 1282633233 25200
# Node ID 07f470a80f70e9a04b9dcff0e2db777130fddbea
# Parent 29ac0213b54cfaee7fdaf4aec9b5230dc8183abb
[palm] Initial build configuration for PDK
* * *
[palm] Fix build config dependency hacks
* * *
[palm] Add Pre compiler flags and ignore broken host compiler tests
* * *
[palm] First stages of making build work on windows
* * *
[palm] Fix palm_toolchain default location
* * *
[palm] Allow building with jemalloc
* * *
[palm] Allow building with ctypes

diff --git a/config/autoconf.mk.in b/config/autoconf.mk.in
--- a/config/autoconf.mk.in
+++ b/config/autoconf.mk.in
@@ -671,6 +671,10 @@ MOZ_OFFICIAL_BRANDING = @MOZ_OFFICIAL_BR
 HAVE_CLOCK_MONOTONIC = @HAVE_CLOCK_MONOTONIC@
 REALTIME_LIBS = @REALTIME_LIBS@
 
+WEBOS             = @WEBOS@
+PALM_PDK          = @PALM_PDK@
+PALM_SDK          = @PALM_SDK@
+
 ANDROID_NDK       = @ANDROID_NDK@
 ANDROID_TOOLCHAIN = @ANDROID_TOOLCHAIN@
 ANDROID_PLATFORM  = @ANDROID_PLATFORM@
diff --git a/config/rules.mk b/config/rules.mk
--- a/config/rules.mk
+++ b/config/rules.mk
@@ -99,6 +99,9 @@ VPATH += $(DIST)/lib
 ifdef LIBXUL_SDK
 VPATH += $(LIBXUL_SDK)/lib
 endif
+ifdef PALM_PDK
+VPATH += $(PALM_PDK)/arm-gcc/sysroot/usr/lib
+endif
 
 # EXPAND_LIBNAME - $(call EXPAND_LIBNAME,foo)
 # expands to foo.lib on platforms with import libs and -lfoo otherwise
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -345,6 +345,108 @@ AC_SUBST(ANDROID_SDK)
 AC_SUBST(ANDROID_TOOLS)
 
 dnl ========================================================
+dnl = Palm PDK compilation options
+dnl ========================================================
+
+AC_ARG_WITH(palm-pdk,
+    [  --with-palm-pdk=DIR
+           location where the Palm PDK can be found],
+    palm_pdk=$withval)
+
+AC_ARG_WITH(palm-sdk,
+    [  --with-palm-sdk=DIR
+           location where the Palm SDK can be found],
+    palm_sdk=$withval)
+
+AC_ARG_WITH(palm-toolchain,
+    [  --with-palm-toolchain=DIR
+           location of the palm toolchain, default PDK/arm-gcc],
+    palm_toolchain=$withval)
+
+if test "$target" = "arm-palm-eabi" ; then
+    if test -z "$palm_pdk" ; then
+        palm_pdk=/opt/PalmPDK
+    fi
+    if test -z "$palm_sdk" ; then
+        palm_sdk=/opt/PalmSDK/Current
+    fi
+
+    if ! test -L "${palm_pdk}/device/lib/libSDL.so" ; then
+        AC_MSG_ERROR([You must specify the path to the Palm PDK with --with-palm-pdk=/path/to/pdk when targeting Palm.])
+    fi
+
+    if ! test -x "${palm_sdk}/bin/palm-package" ; then
+        AC_MSG_ERROR([You must specify the path to the Palm SDK with --with-palm-sdk=/path/to/sdk when targeting Palm.])
+    fi
+
+    if test -z "$palm_toolchain" ; then
+       palm_toolchain="$palm_pdk/arm-gcc"
+    fi
+
+    dnl set up compilers
+    AS="$palm_toolchain/bin/arm-none-linux-gnueabi-as"
+    CC="$palm_toolchain/bin/arm-none-linux-gnueabi-gcc"
+    CXX="$palm_toolchain/bin/arm-none-linux-gnueabi-g++"
+    CPP="$palm_toolchain/bin/arm-none-linux-gnueabi-cpp"
+    LD="$palm_toolchain/bin/arm-none-linux-gnueabi-ld"
+    AR="$palm_toolchain/bin/arm-none-linux-gnueabi-ar"
+    RANLIB="$palm_toolchain/bin/arm-none-linux-gnueabi-ranlib"
+    STRIP="$palm_toolchain/bin/arm-none-linux-gnueabi-strip"
+
+    dnl set up the various flags, but only if they're not specified earlier
+    palm_flags="-I$palm_pdk/include -I$palm_pdk/include/SDL -mfloat-abi=softfp -fno-short-enums -fno-exceptions"
+    palm_flags+=" -mcpu=cortex-a8 -mfpu=neon"
+    #palm_flags+=" -mcpu=arm1136jf-s -mfpu=vfp"
+    if test -z "$CPPFLAGS" ; then
+        CPPFLAGS=$palm_flags
+    fi
+
+    if test -z "$CFLAGS" ; then
+        CFLAGS=$palm_flags
+    fi
+
+    if test -z "$CXXFLAGS" ; then
+        CXXFLAGS=$palm_flags
+    fi
+
+    if test -z "$LDFLAGS" ; then
+        LDFLAGS="-L$palm_pdk/device/lib -Wl,--allow-shlib-undefined"
+        case "$host" in
+        *-cygwin*|*-mingw*|*-msvc*|*-mks*)
+            ;;
+        *)
+            LDFLAGS+=" --sysroot=$palm_toolchain/sysroot"
+            ;;
+        esac
+    fi
+
+    dnl Make sure the host flags don't default to the target flags
+    if test -z "$HOST_CPPFLAGS"; then
+        HOST_CPPFLAGS=" "
+    fi
+    if test -z "$HOST_CFLAGS"; then
+        HOST_CFLAGS=" "
+    fi
+    if test -z "$HOST_CXXFLAGS"; then
+        HOST_CXXFLAGS=" "
+    fi
+    if test -z "$HOST_LDFLAGS"; then
+        HOST_LDFLAGS=" "
+    fi
+
+    CROSS_COMPILE=1
+    WEBOS=1
+    PALM_PDK="${palm_pdk}"
+    PALM_SDK="${palm_sdk}"
+
+    AC_DEFINE(WEBOS)
+
+    AC_SUBST(WEBOS)
+    AC_SUBST(PALM_PDK)
+    AC_SUBST(PALM_SDK)
+fi
+
+dnl ========================================================
 dnl Checks for compilers.
 dnl ========================================================
 dnl Set CROSS_COMPILE in the environment when running configure
@@ -441,18 +543,18 @@ if test -n "$CROSS_COMPILE" -a "$target"
     CFLAGS="$HOST_CFLAGS"
     LDFLAGS="$HOST_LDFLAGS"
 
-    AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
-    AC_TRY_COMPILE([], [return(0);], 
-	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
-	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
+#    AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
+#    AC_TRY_COMPILE([], [return(0);], 
+#	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
+#	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
 
     CC="$HOST_CXX"
     CFLAGS="$HOST_CXXFLAGS"
 
-    AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
-    AC_TRY_COMPILE([], [return(0);], 
-	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
-	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
+#    AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
+#    AC_TRY_COMPILE([], [return(0);], 
+#	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
+#	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
     
     CC=$_SAVE_CC
     CFLAGS=$_SAVE_CFLAGS
@@ -1263,6 +1365,9 @@ if test -n "$CROSS_COMPILE"; then
     case "${target}" in
         arm-android-eabi) OS_ARCH=Linux OS_TARGET=Android ;;
     esac
+    case "${target}" in
+        arm-palm-eabi) OS_ARCH=Linux OS_TARGET=WebOS ;;
+    esac
 else
     OS_TARGET=`uname -s`
     OS_ARCH=`uname -s | sed -e 's|/|_|g'`
@@ -2829,6 +2934,15 @@ alpha*-*-osf*)
     MOZ_OPTIMIZE_FLAGS="-Os -freorder-blocks -fno-reorder-functions -fomit-frame-pointer"
     ;;
 
+*-palm*)
+    no_x=yes
+    _PLATFORM_DEFAULT_TOOLKIT=cairo-webos
+    TARGET_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
+
+    MOZ_GFX_OPTIMIZE_MOBILE=1
+    MOZ_OPTIMIZE_FLAGS="-Os -freorder-blocks -fno-reorder-functions -fomit-frame-pointer"
+    ;;
+
 esac
 
 dnl Only one oddball right now (QNX), but this gives us flexibility
@@ -4976,6 +5090,24 @@ case "${target}" in
         ;;
 esac
 
+case "${target}" in
+    arm-palm-eabi)
+        NSS_DISABLE_DBM=1
+        MOZ_OGG=
+        MOZ_WAVE=
+        MOZ_WEBM=
+        USE_ARM_KUSER=1
+        MOZ_INSTALLER=
+        MOZ_CRASHREPORTER=
+        NS_PRINTING=
+        NECKO_WIFI=
+        MOZ_IPC=
+        MOZ_THEME_FASTSTRIPE=1
+        MOZ_TREE_FREETYPE=1
+        MOZ_MEMORY=1
+        ;;
+esac
+
 MOZ_ARG_ENABLE_STRING(application,
 [  --enable-application=APP
                           Options include:
@@ -5096,7 +5228,8 @@ MOZ_ARG_HEADER(Toolkit Options)
         -o "$_DEFAULT_TOOLKIT" = "cairo-beos" \
         -o "$_DEFAULT_TOOLKIT" = "cairo-os2" \
         -o "$_DEFAULT_TOOLKIT" = "cairo-cocoa" \
-        -o "$_DEFAULT_TOOLKIT" = "cairo-android"
+        -o "$_DEFAULT_TOOLKIT" = "cairo-android" \
+        -o "$_DEFAULT_TOOLKIT" = "cairo-webos"
     then
         dnl nglayout only supports building with one toolkit,
         dnl so ignore everything after the first comma (",").
@@ -5211,6 +5344,12 @@ cairo-android)
     MOZ_WEBGL=
     ;;
 
+cairo-webos)
+    AC_DEFINE(MOZ_WIDGET_WEBOS)
+    MOZ_WIDGET_TOOLKIT=webos
+    MOZ_WEBGL=
+    ;;
+
 esac
 
 if test "$MOZ_ENABLE_XREMOTE"; then
@@ -7271,7 +7410,14 @@ if test "$MOZ_MEMORY"; then
     export WRAP_MALLOC_LIB="-L$_objdir/dist/lib -lmozalloc"
     ;;
   *)
-    AC_MSG_ERROR([--enable-jemalloc not supported on ${target}])
+    case "${target}" in
+      *palm*)
+        AC_DEFINE(MOZ_MEMORY_LINUX)
+        ;;
+      *)
+        AC_MSG_ERROR([--enable-jemalloc not supported on ${target}])
+        ;;
+      esac
     ;;
   esac
 
diff --git a/js/src/config/autoconf.mk.in b/js/src/config/autoconf.mk.in
--- a/js/src/config/autoconf.mk.in
+++ b/js/src/config/autoconf.mk.in
@@ -340,5 +340,8 @@ ENABLE_TRACEJIT = @ENABLE_TRACEJIT@
 NANOJIT_ARCH = @NANOJIT_ARCH@
 HAVE_ARM_SIMD= @HAVE_ARM_SIMD@
 
+WEBOS             = @WEBOS@
+PALM_PDK          = @PALM_PDK@
+
 JS_SHARED_LIBRARY = @JS_SHARED_LIBRARY@
 HAVE_LINUX_PERF_EVENT_H = @HAVE_LINUX_PERF_EVENT_H@
diff --git a/js/src/config/rules.mk b/js/src/config/rules.mk
--- a/js/src/config/rules.mk
+++ b/js/src/config/rules.mk
@@ -99,6 +99,9 @@ VPATH += $(DIST)/lib
 ifdef LIBXUL_SDK
 VPATH += $(LIBXUL_SDK)/lib
 endif
+ifdef PALM_PDK
+VPATH += $(PALM_PDK)/arm-gcc/sysroot/usr/lib
+endif
 
 # EXPAND_LIBNAME - $(call EXPAND_LIBNAME,foo)
 # expands to foo.lib on platforms with import libs and -lfoo otherwise
diff --git a/js/src/configure.in b/js/src/configure.in
--- a/js/src/configure.in
+++ b/js/src/configure.in
@@ -293,6 +293,90 @@ if test "$target" = "arm-android-eabi" ;
 fi
 
 dnl ========================================================
+dnl = Palm PDK compilation options
+dnl ========================================================
+
+AC_ARG_WITH(palm-pdk,
+    [  --with-palm-pdk=DIR
+           location where the Palm PDK can be found],
+    palm_pdk=$withval)
+
+AC_ARG_WITH(palm-toolchain,
+    [  --with-palm-toolchain=DIR
+           location of the palm toolchain, default PDK/arm-gcc],
+    palm_toolchain=$withval)
+
+if test "$target" = "arm-palm-eabi" ; then
+    if test -z "$palm_pdk" ; then
+       AC_MSG_ERROR([Palm target, but missing --with-palm-pdk option!])
+    fi
+
+    if test -z "$palm_toolchain" ; then
+       palm_toolchain="$palm_pdk/arm-gcc"
+    fi
+
+    dnl set up compilers
+    AS="$palm_toolchain/bin/arm-none-linux-gnueabi-as"
+    CC="$palm_toolchain/bin/arm-none-linux-gnueabi-gcc"
+    CXX="$palm_toolchain/bin/arm-none-linux-gnueabi-g++"
+    CPP="$palm_toolchain/bin/arm-none-linux-gnueabi-cpp"
+    LD="$palm_toolchain/bin/arm-none-linux-gnueabi-ld"
+    AR="$palm_toolchain/bin/arm-none-linux-gnueabi-ar"
+    RANLIB="$palm_toolchain/bin/arm-none-linux-gnueabi-ranlib"
+    STRIP="$palm_toolchain/bin/arm-none-linux-gnueabi-strip"
+
+    dnl set up the various flags
+    palm_flags="-I$palm_pdk/include -mfloat-abi=softfp -fno-short-enums -fno-exceptions"
+    palm_flags+=" -mcpu=cortex-a8 -mfpu=neon"
+    #palm_flags+=" -mcpu=arm1136jf-s -mfpu=vfp"
+    CPPFLAGS="$palm_flags $CPPFLAGS"
+    CFLAGS="$palm_flags $CFLAGS"
+    CXXFLAGS="$palm_flags $CXXFLAGS"
+    LDFLAGS="-L$palm_pdk/device/lib -Wl,--allow-shlib-undefined $LDFLAGS"
+    case "$host" in
+    *-cygwin*|*-mingw*|*-msvc*|*-mks*)
+        ;;
+    *)
+        LDFLAGS+=" --sysroot=$palm_toolchain/sysroot"
+        ;;
+    esac
+
+    dnl Make sure the host flags don't default to the target flags
+    if test -z "$HOST_CPPFLAGS"; then
+        HOST_CPPFLAGS=" "
+    fi
+    if test -z "$HOST_CFLAGS"; then
+        HOST_CFLAGS=" "
+    fi
+    if test -z "$HOST_CXXFLAGS"; then
+        HOST_CXXFLAGS=" "
+    fi
+    if test -z "$HOST_LDFLAGS"; then
+        HOST_LDFLAGS=" "
+    fi
+
+    WEBOS=1
+    PALM_PDK="${palm_pdk}"
+
+    AC_DEFINE(WEBOS)
+    AC_DEFINE(FORCE_LITTLE_ENDIAN)
+
+    AC_SUBST(WEBOS)
+    AC_SUBST(PALM_PDK)
+
+    # save these for libffi's subconfigure,
+    # which doesn't know how to figure this stuff out on its own
+    ANDROID_CC="$CC"
+    ANDROID_CPP="$CPP"
+    ANDROID_LD="$LD"
+    ANDROID_AR="$AR"
+    ANDROID_RANLIB="$RANLIB"
+    ANDROID_CFLAGS="$CFLAGS"
+    ANDROID_CPPFLAGS="$CPPFLAGS"
+    ANDROID_LDFLAGS="$LDFLAGS"
+fi
+
+dnl ========================================================
 dnl Checks for compilers.
 dnl ========================================================
 
@@ -339,18 +423,18 @@ if test "$target" != "$host"; then
     CFLAGS="$HOST_CFLAGS"
     LDFLAGS="$HOST_LDFLAGS"
 
-    AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
-    AC_TRY_COMPILE([], [return(0);], 
-	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
-	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
+#    AC_MSG_CHECKING([whether the host c compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
+#    AC_TRY_COMPILE([], [return(0);], 
+#	[ac_cv_prog_hostcc_works=1 AC_MSG_RESULT([yes])],
+#	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CC cannot create executables.]) )
 
     CC="$HOST_CXX"
     CFLAGS="$HOST_CXXFLAGS"
 
-    AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
-    AC_TRY_COMPILE([], [return(0);], 
-	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
-	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
+#    AC_MSG_CHECKING([whether the host c++ compiler ($HOST_CXX $HOST_CXXFLAGS $HOST_LDFLAGS) works])
+#    AC_TRY_COMPILE([], [return(0);], 
+#	[ac_cv_prog_hostcxx_works=1 AC_MSG_RESULT([yes])],
+#	AC_MSG_ERROR([installation or configuration problem: host compiler $HOST_CXX cannot create executables.]) )
     
     CC=$_SAVE_CC
     CFLAGS=$_SAVE_CFLAGS
@@ -1595,8 +1679,6 @@ case "$host" in
     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX -DXP_MACOSX -DNO_X11"
     HOST_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
-    LDFLAGS="$LDFLAGS -lobjc"
-    LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) $(LIBXUL_DIST)/bin/XUL'
     ;;
 
 *-linux*|*-kfreebsd*-gnu|*-gnu*)
@@ -1736,7 +1818,8 @@ case "$target" in
     STRIP="$STRIP -x -S"
     _PLATFORM_DEFAULT_TOOLKIT='cairo-cocoa'
     TARGET_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
-    LDFLAGS="$LDFLAGS -framework Cocoa"
+    LDFLAGS="$LDFLAGS -framework Cocoa -lobjc"
+    LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) $(LIBXUL_DIST)/bin/XUL'
     # The ExceptionHandling framework is needed for Objective-C exception
     # logging code in nsObjCExceptions.h. Currently we only use that in debug
     # builds.
@@ -2629,7 +2712,7 @@ sparc-*)
 esac
 
 case "$target" in
-*-linux*|*-android-eabi)
+*-linux*|*-android-eabi|*-palm-eabi)
     AC_DEFINE(AVMPLUS_UNIX)
     AC_DEFINE(AVMPLUS_LINUX)
     ;;
@@ -4319,7 +4402,14 @@ if test "$MOZ_MEMORY"; then
     AC_DEFINE(MOZ_MEMORY_ANDROID)
     ;;
   *)
-    AC_MSG_ERROR([--enable-jemalloc not supported on ${target}])
+    case "${target}" in
+      *palm*)
+        AC_DEFINE(MOZ_MEMORY_LINUX)
+        ;;
+      *)
+        AC_MSG_ERROR([--enable-jemalloc not supported on ${target}])
+        ;;
+      esac
     ;;
   esac
 fi
@@ -5407,6 +5497,20 @@ if test "$JS_HAS_CTYPES"; then
 
       ac_configure_args="$ac_configure_args --build=$build --host=${target_cpu}-${target_os} HOST_CC=\"$HOST_CC\""
       ;;
+    *-palm*)
+      CC="$ANDROID_CC"
+      CPP="$ANDROID_CPP"
+      LD="$ANDROID_LD"
+      AR="$ANDROID_AR"
+      RANLIB="$ANDROID_RANLIB"
+      CFLAGS="$ANDROID_CFLAGS"
+      CPPFLAGS="$ANDROID_CPPFLAGS"
+      LDFLAGS="$ANDROID_LDFLAGS"
+
+      export CC CPP LD AR RANLIB CPPFLAGS CFLAGS LDFLAGS
+
+      ac_configure_args="$ac_configure_args --build=$build --host=${target_cpu}-${target_os} HOST_CC=\"$HOST_CC\""
+      ;;
     *)
       ac_configure_args="$ac_configure_args --build=$build --host=$target HOST_CC=\"$HOST_CC\" CC=\"$CC\""
       ;;
diff --git a/nsprpub/configure.in b/nsprpub/configure.in
--- a/nsprpub/configure.in
+++ b/nsprpub/configure.in
@@ -198,6 +198,70 @@ if test "$target" = "arm-android-eabi" ;
 fi
 
 dnl ========================================================
+dnl = Palm PDK compilation options
+dnl ========================================================
+
+AC_ARG_WITH(palm-pdk,
+    [  --with-palm-pdk=DIR
+           location where the Palm PDK can be found],
+    palm_pdk=$withval)
+
+AC_ARG_WITH(palm-toolchain,
+    [  --with-palm-toolchain=DIR
+           location of the palm toolchain, default PDK/arm-gcc],
+    palm_toolchain=$withval)
+
+if test "$target" = "arm-palm-eabi" ; then
+    if test -z "$palm_pdk" ; then
+       AC_MSG_ERROR([Palm target, but missing --with-palm-pdk option!])
+    fi
+
+    if test -z "$palm_toolchain" ; then
+       palm_toolchain="$palm_pdk/arm-gcc"
+    fi
+
+    dnl set up compilers
+    AS="$palm_toolchain/bin/arm-none-linux-gnueabi-as"
+    CC="$palm_toolchain/bin/arm-none-linux-gnueabi-gcc"
+    CXX="$palm_toolchain/bin/arm-none-linux-gnueabi-g++"
+    CPP="$palm_toolchain/bin/arm-none-linux-gnueabi-cpp"
+    LD="$palm_toolchain/bin/arm-none-linux-gnueabi-ld"
+    AR="$palm_toolchain/bin/arm-none-linux-gnueabi-ar"
+    RANLIB="$palm_toolchain/bin/arm-none-linux-gnueabi-ranlib"
+    STRIP="$palm_toolchain/bin/arm-none-linux-gnueabi-strip"
+
+    dnl set up the various flags
+    palm_flags="-I$palm_pdk/include -mfloat-abi=softfp -fno-short-enums -fno-exceptions"
+    palm_flags+=" -mcpu=cortex-a8 -mfpu=neon"
+    #palm_flags+=" -mcpu=arm1136jf-s -mfpu=vfp"
+    CPPFLAGS="$palm_flags $CPPFLAGS"
+    CFLAGS="$palm_flags $CFLAGS"
+    CXXFLAGS="$palm_flags $CXXFLAGS"
+    LDFLAGS="-L$palm_pdk/device/lib -Wl,--allow-shlib-undefined $LDFLAGS"
+    case "$host" in
+    *-cygwin*|*-mingw*|*-msvc*|*-mks*)
+        ;;
+    *)
+        LDFLAGS+=" --sysroot=$palm_toolchain/sysroot"
+        ;;
+    esac
+
+    dnl Make sure the host flags don't default to the target flags
+    if test -z "$HOST_CPPFLAGS"; then
+        HOST_CPPFLAGS=" "
+    fi
+    if test -z "$HOST_CFLAGS"; then
+        HOST_CFLAGS=" "
+    fi
+    if test -z "$HOST_CXXFLAGS"; then
+        HOST_CXXFLAGS=" "
+    fi
+    if test -z "$HOST_LDFLAGS"; then
+        HOST_LDFLAGS=" "
+    fi
+fi
+
+dnl ========================================================
 dnl =
 dnl = Check options that may affect the compiler
 dnl =
@@ -509,10 +573,10 @@ if test "$target" != "$host"; then
     CFLAGS="$HOST_CFLAGS"
     LDFLAGS="$HOST_LDFLAGS"
 
-    AC_MSG_CHECKING([whether the $host compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
-    AC_TRY_COMPILE([], [return(0);], 
-        [ac_cv_prog_host_cc_works=1 AC_MSG_RESULT([yes])],
-        AC_MSG_ERROR([installation or configuration problem: $host compiler $HOST_CC cannot create executables.]) )
+#    AC_MSG_CHECKING([whether the $host compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
+#    AC_TRY_COMPILE([], [return(0);], 
+#        [ac_cv_prog_host_cc_works=1 AC_MSG_RESULT([yes])],
+#        AC_MSG_ERROR([installation or configuration problem: $host compiler $HOST_CC cannot create executables.]) )
 
     CC=$_SAVE_CC
     CFLAGS=$_SAVE_CFLAGS
@@ -1576,6 +1640,33 @@ arm-android-eabi)
     OS_TARGET=Android
     ;;
 
+arm-palm-eabi)
+    if test -z "$USE_NSPR_THREADS"; then
+        USE_PTHREADS=1
+        IMPL_STRATEGY=_PTH
+    fi
+    AC_DEFINE(XP_UNIX)
+    AC_DEFINE(_GNU_SOURCE)
+    AC_DEFINE(HAVE_FCNTL_FILE_LOCKING)
+    AC_DEFINE(LINUX)
+    CFLAGS="$CFLAGS -Wall"
+    CXXFLAGS="$CXXFLAGS -Wall"
+    MDCPUCFG_H=_linux.cfg
+    PR_MD_CSRCS=linux.c
+    MKSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
+    DSO_CFLAGS=-fPIC
+    DSO_LDOPTS='-shared -Wl,-soname -Wl,$(notdir $@)'
+    _OPTIMIZE_FLAGS=-O2
+    _DEBUG_FLAGS="-g -fno-inline"  # most people on linux use gcc/gdb, and that
+                                   # combo is not yet good at debugging inlined
+                                   # functions (even when using DWARF2 as the
+                                   # debugging format)
+    COMPILER_TAG=_glibc
+    CPU_ARCH=arm
+    CPU_ARCH_TAG=_arm
+    OS_TARGET=WebOS
+    ;;
+
 *-linux*|*-gnu*|*-k*bsd*-gnu)
     if test -z "$USE_NSPR_THREADS"; then
         USE_PTHREADS=1
diff --git a/security/manager/Makefile.in b/security/manager/Makefile.in
--- a/security/manager/Makefile.in
+++ b/security/manager/Makefile.in
@@ -294,6 +294,14 @@ DEFAULT_GMAKE_FLAGS += \
 	$(NULL)
 endif
 
+ifeq ($(OS_TARGET), WebOS)
+DEFAULT_GMAKE_FLAGS += \
+	OS_RELEASE="2.6" \
+	DSO_CFLAGS="$(CFLAGS)" \
+	DSO_LDOPTS="-shared $(LDFLAGS)" \
+	$(NULL)
+endif
+
 SKIP_CHK=1
 endif
 ifdef WRAP_MALLOC_CFLAGS
diff --git a/toolkit/library/Makefile.in b/toolkit/library/Makefile.in
--- a/toolkit/library/Makefile.in
+++ b/toolkit/library/Makefile.in
@@ -273,6 +273,12 @@ endif
 
 include $(topsrcdir)/config/rules.mk
 
+# XXXMossop shared linking to libgcc creates a dependency on GCC_4.3.0 which is
+# not on the device
+ifdef WEBOS
+LDFLAGS += -static-libgcc
+endif
+
 export:: $(RDF_UTIL_SRC_CPPSRCS) $(INTL_UNICHARUTIL_UTIL_CPPSRCS)
 	$(INSTALL) $^ .
 
