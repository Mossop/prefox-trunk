# HG changeset patch
# User Dave Townsend <dtownsend@oxymoronical.com>
# Date 1278551386 25200
# Node ID 07f470a80f70e9a04b9dcff0e2db777130fddbea
# Parent 2d7d6233171a1f396b4e8ba3194f1a5376504990
[palm] Initial build configuration for PDK

diff --git a/config/autoconf.mk.in b/config/autoconf.mk.in
--- a/config/autoconf.mk.in
+++ b/config/autoconf.mk.in
@@ -664,6 +664,8 @@ MOZ_OFFICIAL_BRANDING = @MOZ_OFFICIAL_BR
 HAVE_CLOCK_MONOTONIC = @HAVE_CLOCK_MONOTONIC@
 REALTIME_LIBS = @REALTIME_LIBS@
 
+WEBOS             = @WEBOS@
+
 ANDROID_NDK       = @ANDROID_NDK@
 ANDROID_TOOLCHAIN = @ANDROID_TOOLCHAIN@
 ANDROID_PLATFORM  = @ANDROID_PLATFORM@
diff --git a/config/rules.mk b/config/rules.mk
--- a/config/rules.mk
+++ b/config/rules.mk
@@ -839,9 +839,10 @@ DSO_LDOPTS_DEPS = $(EXTRA_DSO_LIBS) $(fi
 
 ifndef _LIBNAME_RELATIVE_PATHS
 
-LIBS_DEPS += $(filter -l%, $(LIBS))
-HOST_LIBS_DEPS += $(filter -l%, $(HOST_LIBS))
-DSO_LDOPTS_DEPS += $(filter -l%, $(EXTRA_DSO_LDOPTS))
+# XXXMossop dependencies for -lxxx are broken
+#LIBS_DEPS += $(filter -l%, $(LIBS))
+#HOST_LIBS_DEPS += $(filter -l%, $(HOST_LIBS))
+#DSO_LDOPTS_DEPS += $(filter -l%, $(EXTRA_DSO_LDOPTS))
 
 _LIBDIRS = $(patsubst -L%,%,$(filter -L%, $(LIBS) $(HOST_LIBS) $(EXTRA_DSO_LDOPTS)))
 ifneq (,$(_LIBDIRS))
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -342,6 +342,79 @@ AC_SUBST(ANDROID_SDK)
 AC_SUBST(ANDROID_TOOLS)
 
 dnl ========================================================
+dnl = Palm PDK compilation options
+dnl ========================================================
+
+AC_ARG_WITH(palm-pdk,
+    [  --with-palm-pdk=DIR
+           location where the Palm PDK can be found],
+    palm_pdk=$withval)
+
+if test "$target" = "arm-palm-eabi" ; then
+    if test -z "$palm_pdk" ; then
+       AC_MSG_ERROR([Palm target, but missing --with-palm-pdk option!])
+    fi
+
+    dnl set up compilers
+    AS="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-as
+    CC="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-gcc
+    CXX="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-g++
+    CPP="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-cpp
+    LD="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-ld
+    AR="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-ar
+    RANLIB="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-ranlib
+    STRIP="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-strip
+
+    dnl set up the various flags, but only if they're not specified earlier
+    if test -z "$CPPFLAGS" ; then
+        CPPFLAGS="-I$palm_pdk/include -DWEBOS"
+    fi
+
+    if test -z "$CFLAGS" ; then
+        CFLAGS="-I$palm_pdk/include -DWEBOS"
+    fi
+
+    if test -z "$CXXFLAGS" ; then
+        CXXFLAGS="-I$palm_pdk/include -DWEBOS"
+    fi
+
+    if test -z "$LDFLAGS" ; then
+        LDFLAGS="-L$palm_pdk/device/lib"
+        LDFLAGS="$LDFLAGS --sysroot=$palm_pdk/arm-gcc/sysroot"
+        dnl Add --allow-shlib-undefined, because libGLESv2 links to an
+        dnl undefined symbol (present on the hardware, just not in the
+        dnl NDK.)
+        LDFLAGS="$LDFLAGS -Wl,--allow-shlib-undefined"
+    fi
+
+    dnl For some reason this configure uses CFLAGS as HOST_CFLAGS.. what gives?
+    if test -z "$HOST_CPPFLAGS" ; then
+        HOST_CPPFLAGS=" "
+    fi
+    if test -z "$HOST_CFLAGS" ; then
+        HOST_CFLAGS=" "
+    fi
+    if test -z "$HOST_CXXFLAGS" ; then
+        HOST_CXXFLAGS=" "
+    fi
+    if test -z "$HOST_LDFLAGS" ; then
+        HOST_LDFLAGS=" "
+    fi
+
+    HOST_CC=""
+    HOST_CXX=""
+
+    WEBOS=1
+    PALM_PDK="${palm_pdk}"
+    MOZ_OPTIMIZE_FLAGS="-Os"
+
+    AC_SUBST(WEBOS)
+    AC_SUBST(PALM_PDK)
+
+    CROSS_COMPILE=1
+fi
+
+dnl ========================================================
 dnl Checks for compilers.
 dnl ========================================================
 dnl Set CROSS_COMPILE in the environment when running configure
@@ -1249,6 +1322,9 @@ if test -n "$CROSS_COMPILE"; then
     case "${target}" in
         arm-android-eabi) OS_ARCH=Linux OS_TARGET=Android ;;
     esac
+    case "${target}" in
+        arm-palm-eabi) OS_ARCH=Linux OS_TARGET=WebOS ;;
+    esac
 else
     OS_TARGET=`uname -s`
     OS_ARCH=`uname -s | sed -e 's|/|_|g'`
@@ -2818,6 +2894,16 @@ alpha*-*-osf*)
     MOZ_OPTIMIZE_FLAGS="-Os -freorder-blocks -fno-reorder-functions -fomit-frame-pointer"
     ;;
 
+*-palm*)
+    no_x=yes
+    _PLATFORM_DEFAULT_TOOLKIT=cairo-webos
+    TARGET_NSPR_MDCPUCFG='\"md/_linux.cfg\"'
+
+    MOZ_GFX_OPTIMIZE_MOBILE=1
+
+    dnl MOZ_MEMORY=1
+    ;;
+
 esac
 
 dnl Only one oddball right now (QNX), but this gives us flexibility
@@ -4966,6 +5052,23 @@ case "${target}" in
         ;;
 esac
 
+case "${target}" in
+    arm-palm-eabi)
+        NSS_DISABLE_DBM=1
+        MOZ_OGG=
+        MOZ_WAVE=
+        MOZ_WEBM=
+        USE_ARM_KUSER=1
+        MOZ_INSTALLER=
+        MOZ_CRASHREPORTER=
+        NS_PRINTING=
+        NECKO_WIFI=
+        MOZ_PLUGINS=
+        MOZ_TREE_FREETYPE=1
+        MOZ_THEME_FASTSTRIPE=1
+        ;;
+esac
+
 MOZ_ARG_ENABLE_STRING(application,
 [  --enable-application=APP
                           Options include:
@@ -5086,7 +5189,8 @@ MOZ_ARG_HEADER(Toolkit Options)
         -o "$_DEFAULT_TOOLKIT" = "cairo-beos" \
         -o "$_DEFAULT_TOOLKIT" = "cairo-os2" \
         -o "$_DEFAULT_TOOLKIT" = "cairo-cocoa" \
-        -o "$_DEFAULT_TOOLKIT" = "cairo-android"
+        -o "$_DEFAULT_TOOLKIT" = "cairo-android" \
+        -o "$_DEFAULT_TOOLKIT" = "cairo-webos"
     then
         dnl nglayout only supports building with one toolkit,
         dnl so ignore everything after the first comma (",").
@@ -5201,6 +5305,12 @@ cairo-android)
     MOZ_WEBGL=
     ;;
 
+cairo-webos)
+    AC_DEFINE(MOZ_WIDGET_WEBOS)
+    MOZ_WIDGET_TOOLKIT=webos
+    MOZ_WEBGL=
+    ;;
+
 esac
 
 if test "$MOZ_ENABLE_XREMOTE"; then
@@ -5673,7 +5783,7 @@ dnl ====================================
 dnl = Disable IPC support for tabs and plugins
 dnl ========================================================
 case "${target}" in
-*-wince*)
+*-wince*|*-palm*)
     MOZ_IPC=
     ;;
 esac
diff --git a/js/src/config/rules.mk b/js/src/config/rules.mk
--- a/js/src/config/rules.mk
+++ b/js/src/config/rules.mk
@@ -839,9 +839,10 @@ DSO_LDOPTS_DEPS = $(EXTRA_DSO_LIBS) $(fi
 
 ifndef _LIBNAME_RELATIVE_PATHS
 
-LIBS_DEPS += $(filter -l%, $(LIBS))
-HOST_LIBS_DEPS += $(filter -l%, $(HOST_LIBS))
-DSO_LDOPTS_DEPS += $(filter -l%, $(EXTRA_DSO_LDOPTS))
+# XXXMossop dependencies for -lxxx are broken
+#LIBS_DEPS += $(filter -l%, $(LIBS))
+#HOST_LIBS_DEPS += $(filter -l%, $(HOST_LIBS))
+#DSO_LDOPTS_DEPS += $(filter -l%, $(EXTRA_DSO_LDOPTS))
 
 _LIBDIRS = $(patsubst -L%,%,$(filter -L%, $(LIBS) $(HOST_LIBS) $(EXTRA_DSO_LDOPTS)))
 ifneq (,$(_LIBDIRS))
diff --git a/js/src/configure.in b/js/src/configure.in
--- a/js/src/configure.in
+++ b/js/src/configure.in
@@ -278,6 +278,57 @@ if test "$target" = "arm-android-eabi" ;
 fi
 
 dnl ========================================================
+dnl = Palm PDK compilation options
+dnl ========================================================
+
+AC_ARG_WITH(palm-pdk,
+    [  --with-palm-pdk=DIR
+           location where the Palm PDK can be found],
+    palm_pdk=$withval)
+
+if test "$target" = "arm-palm-eabi" ; then
+    if test -z "$palm_pdk" ; then
+       AC_MSG_ERROR([Palm target, but missing --with-palm-pdk option!])
+    fi
+
+    dnl set up compilers
+    AS="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-as
+    CC="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-gcc
+    CXX="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-g++
+    CPP="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-cpp
+    LD="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-ld
+    AR="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-ar
+    RANLIB="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-ranlib
+    STRIP="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-strip
+
+    dnl set up the various flags
+    CPPFLAGS="-I$palm_pdk/include $CPPFLAGS"
+    CFLAGS="-I$palm_pdk/include $CFLAGS"
+    CXXFLAGS="-I$palm_pdk/include $CXXFLAGS"
+    LDFLAGS="-L$palm_pdk/device/lib --sysroot=$palm_pdk/arm-gcc/sysroot -Wl,--allow-shlib-undefined $LDFLAGS"
+
+    dnl prevent cross compile section from using these flags as host flags
+    if test -z "$HOST_CPPFLAGS" ; then
+        HOST_CPPFLAGS=" "
+    fi
+    if test -z "$HOST_CFLAGS" ; then
+        HOST_CFLAGS=" "
+    fi
+    if test -z "$HOST_CXXFLAGS" ; then
+        HOST_CXXFLAGS=" "
+    fi
+    if test -z "$HOST_LDFLAGS" ; then
+        HOST_LDFLAGS=" "
+    fi
+
+    HOST_CC=""
+    HOST_CXX=""
+
+    AC_DEFINE(WEBOS)
+    AC_DEFINE(FORCE_LITTLE_ENDIAN)
+fi
+
+dnl ========================================================
 dnl Checks for compilers.
 dnl ========================================================
 
@@ -1579,8 +1630,6 @@ case "$host" in
     HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX -DXP_MACOSX -DNO_X11"
     HOST_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
     HOST_OPTIMIZE_FLAGS="${HOST_OPTIMIZE_FLAGS=-O3}"
-    LDFLAGS="$LDFLAGS -lobjc"
-    LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) $(LIBXUL_DIST)/bin/XUL'
     ;;
 
 *-linux*|*-kfreebsd*-gnu|*-gnu*)
@@ -1720,7 +1769,8 @@ case "$target" in
     STRIP="$STRIP -x -S"
     _PLATFORM_DEFAULT_TOOLKIT='cairo-cocoa'
     TARGET_NSPR_MDCPUCFG='\"md/_darwin.cfg\"'
-    LDFLAGS="$LDFLAGS -framework Cocoa"
+    LDFLAGS="$LDFLAGS -framework Cocoa -lobjc"
+    LIBXUL_LIBS='$(XPCOM_FROZEN_LDOPTS) $(LIBXUL_DIST)/bin/XUL'
     # The ExceptionHandling framework is needed for Objective-C exception
     # logging code in nsObjCExceptions.h. Currently we only use that in debug
     # builds.
@@ -2619,7 +2669,7 @@ sparc-*)
 esac
 
 case "$target" in
-*-linux*|*-android-eabi)
+*-linux*|*-android-eabi|*-palm-eabi)
     AC_DEFINE(AVMPLUS_UNIX)
     AC_DEFINE(AVMPLUS_LINUX)
     ;;
diff --git a/nsprpub/configure.in b/nsprpub/configure.in
--- a/nsprpub/configure.in
+++ b/nsprpub/configure.in
@@ -198,6 +198,56 @@ if test "$target" = "arm-android-eabi" ;
 fi
 
 dnl ========================================================
+dnl = Palm PDK compilation options
+dnl ========================================================
+
+AC_ARG_WITH(palm-pdk,
+    [  --with-palm-pdk=DIR
+           location where the Palm PDK can be found],
+    palm_pdk=$withval)
+
+if test "$target" = "arm-palm-eabi" ; then
+    if test -z "$palm_pdk" ; then
+       AC_MSG_ERROR([Palm target, but missing --with-palm-pdk option!])
+    fi
+
+    dnl set up compilers
+    AS="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-as
+    CC="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-gcc
+    CXX="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-g++
+    CPP="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-cpp
+    LD="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-ld
+    AR="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-ar
+    RANLIB="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-ranlib
+    STRIP="$palm_pdk"/arm-gcc/bin/arm-none-linux-gnueabi-strip
+
+    dnl set up the various flags
+    CPPFLAGS="-I$palm_pdk/include $CPPFLAGS"
+    CFLAGS="-I$palm_pdk/include $CFLAGS"
+    CXXFLAGS="-I$palm_pdk/include $CXXFLAGS"
+    LDFLAGS="-L$palm_pdk/device/lib --sysroot=$palm_pdk/arm-gcc/sysroot -Wl,--allow-shlib-undefined $LDFLAGS"
+
+    dnl prevent cross compile section from using these flags as host flags
+    if test -z "$HOST_CPPFLAGS" ; then
+        HOST_CPPFLAGS=" "
+    fi
+    if test -z "$HOST_CFLAGS" ; then
+        HOST_CFLAGS=" "
+    fi
+    if test -z "$HOST_CXXFLAGS" ; then
+        HOST_CXXFLAGS=" "
+    fi
+    if test -z "$HOST_LDFLAGS" ; then
+        HOST_LDFLAGS=" "
+    fi
+
+    HOST_CC=""
+    HOST_CXX=""
+
+    AC_DEFINE(PALM)
+fi
+
+dnl ========================================================
 dnl =
 dnl = Check options that may affect the compiler
 dnl =
@@ -1574,6 +1624,33 @@ arm-android-eabi)
     OS_TARGET=Android
     ;;
 
+arm-palm-eabi)
+    if test -z "$USE_NSPR_THREADS"; then
+        USE_PTHREADS=1
+        IMPL_STRATEGY=_PTH
+    fi
+    AC_DEFINE(XP_UNIX)
+    AC_DEFINE(_GNU_SOURCE)
+    AC_DEFINE(HAVE_FCNTL_FILE_LOCKING)
+    AC_DEFINE(LINUX)
+    CFLAGS="$CFLAGS -Wall"
+    CXXFLAGS="$CXXFLAGS -Wall"
+    MDCPUCFG_H=_linux.cfg
+    PR_MD_CSRCS=linux.c
+    MKSHLIB='$(CC) $(DSO_LDOPTS) -o $@'
+    DSO_CFLAGS=-fPIC
+    DSO_LDOPTS='-shared -Wl,-soname -Wl,$(notdir $@)'
+    _OPTIMIZE_FLAGS=-O2
+    _DEBUG_FLAGS="-g -fno-inline"  # most people on linux use gcc/gdb, and that
+                                   # combo is not yet good at debugging inlined
+                                   # functions (even when using DWARF2 as the
+                                   # debugging format)
+    COMPILER_TAG=_glibc
+    CPU_ARCH=arm
+    CPU_ARCH_TAG=_arm
+    OS_TARGET=WebOS
+    ;;
+
 *-linux*|*-gnu*|*-k*bsd*-gnu)
     if test -z "$USE_NSPR_THREADS"; then
         USE_PTHREADS=1
diff --git a/security/manager/Makefile.in b/security/manager/Makefile.in
--- a/security/manager/Makefile.in
+++ b/security/manager/Makefile.in
@@ -296,6 +296,14 @@ DEFAULT_GMAKE_FLAGS += \
 	$(NULL)
 endif
 
+ifeq ($(OS_TARGET), WebOS)
+DEFAULT_GMAKE_FLAGS += \
+	OS_RELEASE="2.6" \
+	DSO_CFLAGS="$(CFLAGS)" \
+	DSO_LDOPTS="-shared $(LDFLAGS)" \
+	$(NULL)
+endif
+
 SKIP_CHK=1
 endif
 ifdef WRAP_MALLOC_CFLAGS
diff --git a/toolkit/library/Makefile.in b/toolkit/library/Makefile.in
--- a/toolkit/library/Makefile.in
+++ b/toolkit/library/Makefile.in
@@ -262,6 +262,12 @@ endif
 
 include $(topsrcdir)/config/rules.mk
 
+# XXXMossop shared linking to libgcc creates a dependency on GCC_4.3.0 which is
+# not on the device
+ifdef WEBOS
+LDFLAGS += -static-libgcc
+endif
+
 export:: $(RDF_UTIL_SRC_CPPSRCS) $(INTL_UNICHARUTIL_UTIL_CPPSRCS)
 	$(INSTALL) $^ .
 
diff --git a/toolkit/library/nsStaticXULComponents.cpp b/toolkit/library/nsStaticXULComponents.cpp
--- a/toolkit/library/nsStaticXULComponents.cpp
+++ b/toolkit/library/nsStaticXULComponents.cpp
@@ -81,6 +81,8 @@
 #  define WIDGET_MODULES MODULE(nsWidgetQtModule)
 #elif defined(MOZ_WIDGET_ANDROID)
 #  define WIDGET_MODULES MODULE(nsWidgetAndroidModule)
+#elif defined(MOZ_WIDGET_WEBOS)
+#  define WIDGET_MODULES
 #else
 #  error Unknown widget module.
 #endif
diff --git a/uriloader/exthandler/Makefile.in b/uriloader/exthandler/Makefile.in
--- a/uriloader/exthandler/Makefile.in
+++ b/uriloader/exthandler/Makefile.in
@@ -117,6 +117,10 @@ ifeq ($(MOZ_WIDGET_TOOLKIT),os2)
 OSHELPER  += nsMIMEInfoOS2.cpp
 endif
 
+ifeq ($(MOZ_WIDGET_TOOLKIT),webos)
+OSHELPER  += nsMIMEInfoUnix.cpp
+endif
+
 EXPORTS = \
 		$(OSDIR)/nsOSHelperAppService.h \
 			$(NULL)
