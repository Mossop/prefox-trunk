# HG changeset patch
# User Dave Townsend <dtownsend@oxymoronical.com>
# Date 1271304989 25200
# Node ID 72fc7a4917b8586882b625b8faac037a1bde1cfa
# Parent  128cf2588baaaa616c52aac565054db9640466ec
[palm] Use SDL 2D rendering surface

diff --git a/gfx/src/thebes/nsThebesDeviceContext.cpp b/gfx/src/thebes/nsThebesDeviceContext.cpp
--- a/gfx/src/thebes/nsThebesDeviceContext.cpp
+++ b/gfx/src/thebes/nsThebesDeviceContext.cpp
@@ -271,7 +271,6 @@ NS_IMPL_ISUPPORTS3(nsThebesDeviceContext
 
 nsThebesDeviceContext::nsThebesDeviceContext()
 {
-    printf("nsThebesDeviceContext::nsThebesDeviceContext\n");
 #ifdef PR_LOGGING
     if (!gThebesGFXLog)
         gThebesGFXLog = PR_NewLogModule("thebesGfx");
diff --git a/widget/src/webos/nsScreenManager.cpp b/widget/src/webos/nsScreenManager.cpp
--- a/widget/src/webos/nsScreenManager.cpp
+++ b/widget/src/webos/nsScreenManager.cpp
@@ -127,15 +127,26 @@ nsScreenManager::GetBounds()
     if (SDL_WasInit(SDL_INIT_VIDEO) == 0) {
         PR_LOG(gScreenManagerLog, PR_LOG_DEBUG, ("SDL Init"));
         SDL_Init(SDL_INIT_VIDEO | SDL_INIT_NOPARACHUTE);
+#ifdef USE_GL
+        SDL_Surface *surface = SDL_SetVideoMode(0, 0, 0, SDL_OPENGL);
+#else
         SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
-        SDL_SetVideoMode(0, 0, 0, SDL_OPENGL);
+        SDL_Surface *surface = SDL_SetVideoMode(0, 0, 0, 0);
+#endif
+        if (!surface) {
+            PR_LOG(gScreenManagerLog, PR_LOG_ERROR, ("Could not get an SDL surface: %s", SDL_GetError()));
+        }
+        NS_ABORT_IF_FALSE(surface, "Could not get an SDL surface");
+
         SDL_EnableUNICODE(1);
 
-        const SDL_VideoInfo *info = SDL_GetVideoInfo();
-        gScreenBounds.width = info->current_w;
-        gScreenBounds.height = info->current_h;
+        gScreenBounds.width = surface->w;
+        gScreenBounds.height = surface->h;
 
-        PR_LOG(gScreenManagerLog, PR_LOG_DEBUG, ("Screen size is %dx%d", info->current_w, info->current_h));
+        PR_LOG(gScreenManagerLog, PR_LOG_DEBUG,
+               ("Screen is % 3dx% 3d, %d bpp, hw(%d) db(%d)",
+                gScreenBounds.width, gScreenBounds.height, surface->format->BitsPerPixel,
+                surface->flags & SDL_HWSURFACE, surface->flags & SDL_DOUBLEBUF));
     }
 
     return gScreenBounds;
diff --git a/widget/src/webos/nsWindow.cpp b/widget/src/webos/nsWindow.cpp
--- a/widget/src/webos/nsWindow.cpp
+++ b/widget/src/webos/nsWindow.cpp
@@ -54,6 +54,7 @@
 
 #include "SDL/SDL.h"
 
+#ifdef USE_GL
 /* OpenGL */
 #include <GLES2/gl2.h>
 #include <GLES2/gl2ext.h>
@@ -61,6 +62,7 @@
 #ifndef GL_BGRA_EXT
 #define GL_BGRA_EXT 0x80E1
 #endif
+#endif
 
 using namespace mozilla;
 
@@ -106,7 +108,7 @@ void
 nsWindow::DumpWindows(const nsTArray<nsWindow*>& wins, int indent)
 {
     if (PR_LOG_TEST(gWindowLog, PR_LOG_DEBUG)) {
-        for (int i = 0; i < wins.Length(); ++i) {
+        for (unsigned int i = 0; i < wins.Length(); ++i) {
             nsWindow *w = wins[i];
             LogWindow(w, i, indent);
             DumpWindows(w->mChildren, indent+1);
@@ -917,8 +919,6 @@ nsWindow::DrawTo(gfxASurface *targetSurf
 void
 nsWindow::Redraw()
 {
-    static bool firstDraw = true;
-
     if (!IsTopLevel()) {
         FindTopLevel()->Redraw();
         return;
@@ -935,13 +935,44 @@ nsWindow::Redraw()
 
     nsRefPtr<gfxImageSurface> targetSurface;
 
-    targetSurface =
-        new gfxImageSurface(gfxIntSize(mBounds.width, mBounds.height), gfxASurface::ImageFormatARGB32);
+    gfxIntSize size(mBounds.width, mBounds.height);
+#ifdef USE_GL
+    targetSurface = new gfxImageSurface(size, gfxASurface::ImageFormatARGB32);
+#else
+    SDL_Surface *surface = SDL_GetVideoSurface();
+    if (!surface) {
+        PR_LOG(gWindowLog, PR_LOG_ERROR, ("Window 0x%08x Failed to get video surface", (void*)this));
+        return;
+    }
+
+    gfxASurface::gfxImageFormat format;
+    switch (surface->format->BitsPerPixel) {
+    case 24:
+        format = gfxASurface::ImageFormatRGB24;
+        break;
+    case 32:
+        format = gfxASurface::ImageFormatARGB32;
+        break;
+    default:
+        PR_LOG(gWindowLog, PR_LOG_ERROR, ("Window 0x%08x Invalid pixel format bpp %d",
+                                          (void*)this, surface->format->BitsPerPixel));
+        return;
+    }
+    
+    if (SDL_LockSurface(surface) < 0) {
+        PR_LOG(gWindowLog, PR_LOG_ERROR, ("Window 0x%08x Failed to lock surface", (void*)this));
+        return;
+    }
+
+    targetSurface = new gfxImageSurface((unsigned char*)surface->pixels, size, surface->pitch, format);
+#endif
 
     DrawTo(targetSurface);
 
     PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Drawing to surface complete"));
 
+#ifdef USE_GL
+    static bool firstDraw = true;
     static bool hasBGRA = false;
 
     if (firstDraw) {
@@ -1093,6 +1124,10 @@ nsWindow::Redraw()
     PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Displaying buffer"));
 
     SDL_GL_SwapBuffers();
+#else
+    SDL_UnlockSurface(surface);
+    SDL_Flip(surface);
+#endif
 
     PR_LOG(gWindowLog, PR_LOG_DEBUG, ("Draw complete"));
 }
